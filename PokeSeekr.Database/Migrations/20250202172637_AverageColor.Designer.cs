// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;
using PokeSeekr.Database.models;

#nullable disable

namespace PokeSeekr.Database.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20250202172637_AverageColor")]
    partial class AverageColor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PokeSeekr.Database.models.PokemonCard", b =>
                {
                    b.Property<int>("PokemonCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pokemon_card_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PokemonCardId"));

                    b.Property<string>("Artist")
                        .HasColumnType("text")
                        .HasColumnName("artist");

                    b.Property<Vector>("AverageColor")
                        .HasColumnType("vector(3)");

                    b.Property<bool?>("Downloaded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("downloaded");

                    b.Property<string>("EvolvesFrom")
                        .HasColumnType("text")
                        .HasColumnName("evolves_from");

                    b.Property<string>("FlavorText")
                        .HasColumnType("text")
                        .HasColumnName("flavor_text");

                    b.Property<string>("Hp")
                        .HasColumnType("text")
                        .HasColumnName("hp");

                    b.Property<string>("ImageLarge")
                        .HasColumnType("text")
                        .HasColumnName("image_large");

                    b.Property<string>("ImageSmall")
                        .HasColumnType("text")
                        .HasColumnName("image_small");

                    b.Property<string>("Level")
                        .HasColumnType("text")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<string>("Rarity")
                        .HasColumnType("text")
                        .HasColumnName("rarity");

                    b.Property<string>("Supertype")
                        .HasColumnType("text")
                        .HasColumnName("supertype");

                    b.Property<string>("TcgId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tcg_id");

                    b.HasKey("PokemonCardId")
                        .HasName("pokemon_cards_pkey");

                    b.ToTable("pokemon_cards", (string)null);
                });

            modelBuilder.Entity("PokeSeekr.Database.models.PokemonCardColor", b =>
                {
                    b.Property<int>("PokemonCardId")
                        .HasColumnType("integer")
                        .HasColumnName("pokemon_card_id");

                    b.Property<int>("ColorIndex")
                        .HasColumnType("integer")
                        .HasColumnName("color_index");

                    b.Property<Vector>("Color")
                        .IsRequired()
                        .HasColumnType("vector(3)");

                    b.Property<decimal>("Coverage")
                        .HasColumnType("numeric")
                        .HasColumnName("coverage");

                    b.HasKey("PokemonCardId", "ColorIndex")
                        .HasName("pokemon_card_colors_pkey");

                    b.HasIndex(new[] { "PokemonCardId" }, "pokemon_card_colors_pokemon_card_id_idx");

                    b.HasIndex(new[] { "PokemonCardId", "ColorIndex" }, "uq_pokemon_card_color")
                        .IsUnique();

                    b.ToTable("pokemon_card_colors", (string)null);
                });

            modelBuilder.Entity("PokeSeekr.Database.models.PokemonCardColor", b =>
                {
                    b.HasOne("PokeSeekr.Database.models.PokemonCard", "PokemonCard")
                        .WithMany("PokemonCardColors")
                        .HasForeignKey("PokemonCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pokemon_card_colors_pokemon_card_id_fkey");

                    b.Navigation("PokemonCard");
                });

            modelBuilder.Entity("PokeSeekr.Database.models.PokemonCard", b =>
                {
                    b.Navigation("PokemonCardColors");
                });
#pragma warning restore 612, 618
        }
    }
}
