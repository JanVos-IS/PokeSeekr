// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;
using PokeSeekr.Database.models;

#nullable disable

namespace PokeSeekr.Database.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20250316162759_AddSetsTable")]
    partial class AddSetsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PokeSeekr.Database.models.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ArtistId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("ArtistId")
                        .HasName("artists_pkey");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("artists", (string)null);
                });

            modelBuilder.Entity("PokeSeekr.Database.models.PokemonCard", b =>
                {
                    b.Property<int>("PokemonCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pokemon_card_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PokemonCardId"));

                    b.Property<string>("Artist")
                        .HasColumnType("text")
                        .HasColumnName("artist");

                    b.Property<Vector>("AverageColor")
                        .HasColumnType("vector(3)");

                    b.Property<bool?>("Downloaded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("downloaded");

                    b.Property<string>("EvolvesFrom")
                        .HasColumnType("text")
                        .HasColumnName("evolves_from");

                    b.Property<string>("FlavorText")
                        .HasColumnType("text")
                        .HasColumnName("flavor_text");

                    b.Property<string>("Hp")
                        .HasColumnType("text")
                        .HasColumnName("hp");

                    b.Property<string>("ImageLarge")
                        .HasColumnType("text")
                        .HasColumnName("image_large");

                    b.Property<string>("ImageSmall")
                        .HasColumnType("text")
                        .HasColumnName("image_small");

                    b.Property<string>("Level")
                        .HasColumnType("text")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<string>("Rarity")
                        .HasColumnType("text")
                        .HasColumnName("rarity");

                    b.Property<string>("Supertype")
                        .HasColumnType("text")
                        .HasColumnName("supertype");

                    b.Property<string>("TcgId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tcg_id");

                    b.HasKey("PokemonCardId")
                        .HasName("pokemon_cards_pkey");

                    b.ToTable("pokemon_cards", (string)null);
                });

            modelBuilder.Entity("PokeSeekr.Database.models.Rarity", b =>
                {
                    b.Property<int>("RarityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rarity_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RarityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("RarityId")
                        .HasName("rarities_pkey");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("rarities", (string)null);
                });

            modelBuilder.Entity("PokeSeekr.Database.models.Set", b =>
                {
                    b.Property<int>("SetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("set_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SetId"));

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("PrintedTotal")
                        .HasColumnType("integer")
                        .HasColumnName("printed_total");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("text")
                        .HasColumnName("release_date");

                    b.Property<string>("Series")
                        .HasColumnType("text")
                        .HasColumnName("series");

                    b.Property<string>("SymbolUrl")
                        .HasColumnType("text")
                        .HasColumnName("symbol_url");

                    b.Property<string>("TcgId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tcg_id");

                    b.Property<int?>("Total")
                        .HasColumnType("integer")
                        .HasColumnName("total");

                    b.HasKey("SetId")
                        .HasName("sets_pkey");

                    b.HasIndex("TcgId")
                        .IsUnique();

                    b.ToTable("sets", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
